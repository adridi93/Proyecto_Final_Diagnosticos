{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c3f3995-6392-4cfe-aaab-d1136523e0a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from keras.models import load_model\n",
    "\n",
    "# Configuración de la página\n",
    "st.set_page_config(page_title=\"Análisis de Datos de Pacientes y Predicción\", layout=\"wide\")\n",
    "\n",
    "# Carga de datos\n",
    "@st.cache_data\n",
    "def load_data():\n",
    "    df = pd.read_csv('df_EDA.csv')\n",
    "    df['AdmissionStartDate'] = pd.to_datetime(df['AdmissionStartDate'])\n",
    "    df['AdmissionEndDate'] = pd.to_datetime(df['AdmissionEndDate'])\n",
    "    return df\n",
    "\n",
    "df = load_data()\n",
    "\n",
    "# Cargar datos del modelo\n",
    "@st.cache_data\n",
    "def load_model_data():\n",
    "    df = pd.read_csv('df_MODELO.csv.csv')\n",
    "    X = df.drop(['PrimaryDiagnosisChapter'], axis=1)\n",
    "    y = df['PrimaryDiagnosisChapter']\n",
    "    \n",
    "    label_encoder = LabelEncoder()\n",
    "    y = label_encoder.fit_transform(y)\n",
    "    \n",
    "    scaler = StandardScaler()\n",
    "    X = scaler.fit_transform(X)\n",
    "    \n",
    "    return X, y, label_encoder, scaler\n",
    "\n",
    "@st.cache_resource\n",
    "def load_trained_model():\n",
    "    return load_model('modelo_series_temporales.h5')\n",
    "\n",
    " Título principal\n",
    "st.title(\"Análisis Exploratorio de Datos de Pacientes\")\n",
    "\n",
    "# Visión general de los datos\n",
    "st.header(\"1. Visión General de los Datos\")\n",
    "st.write(f\"Dimensiones del dataframe: {df.shape}\")\n",
    "st.write(\"Tipos de datos:\")\n",
    "st.write(df.dtypes)\n",
    "\n",
    "# Análisis estadístico descriptivo\n",
    "st.header(\"2. Análisis Estadístico Descriptivo\")\n",
    "st.write(df.describe())\n",
    "\n",
    "# Visualización de distribuciones\n",
    "st.header(\"3. Visualización de Distribuciones\")\n",
    "\n",
    "# Para variables numéricas\n",
    "num_cols = df.select_dtypes(include=['float64', 'int64']).columns\n",
    "selected_num_col = st.selectbox(\"Selecciona una variable numérica\", num_cols)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "sns.histplot(df[selected_num_col], ax=ax)\n",
    "ax.set_title(f'Distribución de {selected_num_col}')\n",
    "st.pyplot(fig)\n",
    "\n",
    "# Para variables categóricas\n",
    "cat_cols = df.select_dtypes(include=['object']).columns\n",
    "selected_cat_col = st.selectbox(\"Selecciona una variable categórica\", cat_cols)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "df[selected_cat_col].value_counts().plot(kind='bar', ax=ax)\n",
    "ax.set_title(f'Distribución de {selected_cat_col}')\n",
    "st.pyplot(fig)\n",
    "\n",
    "# Análisis de correlaciones\n",
    "st.header(\"4. Análisis de Correlaciones\")\n",
    "corr_matrix = df[num_cols].corr()\n",
    "fig, ax = plt.subplots(figsize=(12, 10))\n",
    "sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', ax=ax)\n",
    "ax.set_title('Matriz de Correlación')\n",
    "st.pyplot(fig)\n",
    "\n",
    "# Análisis temporal\n",
    "st.header(\"5. Análisis Temporal\")\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\n",
    "sns.histplot(df['AdmissionDuration'], ax=ax1)\n",
    "ax1.set_title('Distribución de la Duración de Admisión')\n",
    "sns.histplot(df['TimeSinceLastAdmission'], ax=ax2)\n",
    "ax2.set_title('Distribución del Tiempo desde la Última Admisión')\n",
    "st.pyplot(fig)\n",
    "\n",
    "# Análisis demográfico\n",
    "st.header(\"6. Análisis Demográfico\")\n",
    "fig, ax = plt.subplots()\n",
    "sns.histplot(df['Edad'], ax=ax)\n",
    "ax.set_title('Distribución de Edad')\n",
    "st.pyplot(fig)\n",
    "\n",
    "demo_cols = ['PatientGender_Female', 'PatientGender_Male', 'PatientRace', 'PatientLanguage']\n",
    "selected_demo_col = st.selectbox(\"Selecciona una variable demográfica\", demo_cols)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "df[selected_demo_col].value_counts().plot(kind='bar', ax=ax)\n",
    "ax.set_title(f'Distribución de {selected_demo_col}')\n",
    "st.pyplot(fig)\n",
    "\n",
    "# Análisis de diagnósticos\n",
    "st.header(\"7. Análisis de Diagnósticos\")\n",
    "fig, ax = plt.subplots(figsize=(12, 6))\n",
    "df['PrimaryDiagnosisChapter'].value_counts().plot(kind='bar', ax=ax)\n",
    "ax.set_title('Distribución de Capítulos de Diagnóstico Primario')\n",
    "ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')\n",
    "st.pyplot(fig)\n",
    "\n",
    "# Análisis de resultados de laboratorio\n",
    "st.header(\"8. Análisis de Resultados de Laboratorio\")\n",
    "lab_cols = [col for col in df.columns if col.startswith(('CBC:', 'METABOLIC:', 'URINALYSIS:'))]\n",
    "selected_lab_col = st.selectbox(\"Selecciona una prueba de laboratorio\", lab_cols)\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 6))\n",
    "sns.boxplot(x='PrimaryDiagnosisChapter', y=selected_lab_col, data=df, ax=ax)\n",
    "ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')\n",
    "ax.set_title(f'{selected_lab_col} por Capítulo de Diagnóstico Primario')\n",
    "st.pyplot(fig)\n",
    "\n",
    "# Detección de valores atípicos\n",
    "st.header(\"9. Detección de Valores Atípicos\")\n",
    "selected_outlier_col = st.selectbox(\"Selecciona una variable para detectar valores atípicos\", num_cols)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "sns.boxplot(df[selected_outlier_col], ax=ax)\n",
    "ax.set_title(f'Box Plot de {selected_outlier_col}')\n",
    "st.pyplot(fig)\n",
    "\n",
    "# Análisis de variables categóricas\n",
    "st.header(\"10. Análisis de Variables Categóricas\")\n",
    "marital_status_cols = [col for col in df.columns if col.startswith('PatientMaritalStatus_')]\n",
    "selected_marital_col = st.selectbox(\"Selecciona un estado civil\", marital_status_cols)\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "df[selected_marital_col].value_counts().plot(kind='bar', ax=ax)\n",
    "ax.set_title(f'Distribución de {selected_marital_col}')\n",
    "st.pyplot(fig)\n",
    "\n",
    "\n",
    "\n",
    "# Nueva sección para el modelo de predicción\n",
    "st.header(\"11. Modelo de Predicción\")\n",
    "\n",
    "st.subheader(\"Predicción del Capítulo de Diagnóstico Primario\")\n",
    "\n",
    "# Crear inputs para cada característica\n",
    "input_data = {}\n",
    "for col in X.columns:\n",
    "    input_data[col] = st.number_input(f\"Ingrese el valor para {col}\", value=0.0)\n",
    "\n",
    "# Botón para realizar la predicción\n",
    "if st.button(\"Realizar Predicción\"):\n",
    "    # Preparar los datos de entrada\n",
    "    input_array = np.array(list(input_data.values())).reshape(1, -1)\n",
    "    input_scaled = scaler.transform(input_array)\n",
    "    \n",
    "    # Realizar la predicción\n",
    "    prediction = model.predict(input_scaled)\n",
    "    predicted_class = label_encoder.inverse_transform([np.argmax(prediction)])[0]\n",
    "    \n",
    "    st.write(f\"El capítulo de diagnóstico primario predicho es: {predicted_class}\")\n",
    "\n",
    "# Mostrar métricas del modelo (si las tienes guardadas)\n",
    "st.subheader(\"Métricas del Modelo\")\n",
    "# Aquí puedes mostrar métricas pre-calculadas si las tienes guardadas\n",
    "# Por ejemplo:\n",
    "# st.write(f\"Precisión del modelo en el conjunto de prueba: {test_acc:.2f}\")\n",
    "\n",
    "# Si tienes el historial de entrenamiento guardado, puedes mostrarlo aquí\n",
    "# Por ejemplo:\n",
    "# st.subheader(\"Historial de Entrenamiento\")\n",
    "# [Código para mostrar gráficos del historial de entrenamiento]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a980f93-f9b2-4f8f-8fcb-29e12b8162a3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
